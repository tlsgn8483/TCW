# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'WorkList.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets
import sys
import os
import time
import MainUI
import SubUI
from WorkList_db import WorkList_db_class
# from Dev_DataBase import Dev_DataBase_class
# from DB_Jobs import Job_DataBase_class

class Singleton(type):  # Type을 상속받음
    __instances = {}  # 클래스의 인스턴스를 저장할 속성

    def __call__(cls, *args, **kwargs):  # 클래스로 인스턴스를 만들 때 호출되는 메서드
        if cls not in cls.__instances:  # 클래스로 인스턴스를 생성하지 않았는지 확인
            cls.__instances[cls] = super().__call__(*args, **kwargs)  # 생성하지 않았으면 인스턴스를 생성하여 해당 클래스 사전에 저장
            # print("인스턴스 생성 확인")
        # print("인스턴스 활용중 ~")
        # print(cls)
        return cls.__instances[cls]  # 클래스로 인스턴스를 생성했으면 인스턴스 반환

try:
    from watchdog.observers import Observer

    from watchdog.events import FileSystemEventHandler

except ModuleNotFoundError as e:
    print(e)
    os.system("pip install watchdog")


class Handler(FileSystemEventHandler):
    def on_created(self, event):  # 파일 생성시
        # Ui_MainWindow.temp_src = "A" #
        temp = event.src_path
        is_path = temp.rsplit('\\',3)
        PCR_Dir = is_path[1].find('PCR')
        SampleRack_Dir = is_path[1].find('SampleRack')
        temp = temp.replace('\\', '/')  # 경로는 \\가 아닌 /로 치환

        # PCR_폴더나, SampleRack 폴더에서 이벤트가 발생했을경우
        # 항상 DB 에서 업데이트를 하기전 전에 있던 데이터 폴더 경로를 넣어주고
        # 업데이트를 해준다.
        if PCR_Dir != -1 or SampleRack_Dir != -1:
            Previous_Dir_Path = DB.Sel_Bcd()
            DB.Previous_bcd_path(Previous_Dir_Path[0][0])
            Previous_Dir_Path = Previous_Dir_Path[0][0].rsplit('\\', 3)
            DB_dir1 = Previous_Dir_Path[1]  # 이전에 바코드 파일 생성된 폴더가 SampleRack 인지 PCR 인지 구분
            Previous_Dir_Path = Previous_Dir_Path[2]  # 이전에 구동한 PreNAT 프로토콜 이름
            DB.Inst_bcd_path(event.src_path)

            Current_Dir_Path = DB.Sel_Bcd()
            Current_Dir_Path = Current_Dir_Path[0][0].rsplit('\\', 3)
            DB_dir2 = Current_Dir_Path[1]  # 현재 바코드 파일 생성된 폴더가 SampleRack 인지 PCR 인지 구분
            Current_Dir_Path = Current_Dir_Path[2]  # 현재 구동한 PreNAT 프로토콜 이름
            Except_Extraction = Current_Dir_Path.upper().find("EXTRACTION")
            Except_PCRSetup = Current_Dir_Path.upper().find("PCRSETUP")

        if event.is_directory:
            print("디렉토리 생성")
        else:  # not event.is_directory

            """
            Fname : 파일 이름
            Extension : 파일 확장자 
            """
            Fname, Extension = os.path.splitext(os.path.basename(event.src_path))
            '''
             1. zip 파일
             2. exe 파일
             3. lnk 파일
            '''

            # txt 파일만 추출
            # 현재 DB 이름과 전에 있던 DB 이름이 같을 경우, 화면 안띄워줌.
            if Extension == '.txt':
                print("=================================================================")
                print(f"SampleRack_Dir:{SampleRack_Dir}")
                print(f"PCR_Dir:{PCR_Dir}")
                print(f"Previous_Dir_Path:{Previous_Dir_Path}")
                print(f"Current_Dir_Path:{Current_Dir_Path}")
                print(f"DB_dir1:{DB_dir1}")
                print(f"DB_dir2:{DB_dir2}")

                # Extraction 프로토콜일 경우, 화면 띄워줄 필요가 없음.
                if Except_Extraction != -1:
                    return

                # Sample Rack Folder에서 생성이 된 경우, 무조건 화면 띄워줌.
                if SampleRack_Dir != -1:
                    DB.Protocol_State("0")
                    Watcher.temp = 1
                    import shutil  # 파일을 다른곳에 백업 시켜둠.
                    os.makedirs("C:\\Barcode\\", exist_ok=True)
                    shutil.copy(event.src_path, "C:\\Barcode\\")
                    return

                # PCR 폴더에서 생성되었고, 폴더이름이 PCR 인경우, 화면을 띄워줌.
                if PCR_Dir != -1 and Except_PCRSetup != -1:
                    DB.Protocol_State("1")
                    Watcher.temp = 1
                    import shutil  # 파일을 다른곳에 백업 시켜둠.
                    os.makedirs("C:\\Barcode\\", exist_ok=True)
                    shutil.copy(event.src_path, "C:\\Barcode\\")

                # PCR 위치에서 생성되었고, 이전폴더와 현 폴더위치는 다르며, 이전 폴더이름과 현 폴더이름이 같아야함.
                if PCR_Dir != -1 and DB_dir1 != DB_dir2 and Previous_Dir_Path == Current_Dir_Path:
                    control_count = Handler.Control_Count(self)
                    plrn_id = DB.get_check_plrn()
                    DB.make_plrn(plrn_id, control_count)
                    DB.delete_bcd()
                    import shutil  # 파일을 다른곳에 백업 시켜둠.
                    os.makedirs("C:\\Barcode\\", exist_ok=True)
                    shutil.copy(event.src_path, "C:\\Barcode\\")

            elif Extension == '.exe':
                print(".exe 실행 파일 입니다.")
                os.remove(Fname + Extension)  # _파일 삭제 event 발생

    def on_deleted(self, event):

        print("삭제 이벤트 발생")

    def on_moved(self, event):  # 파일 이동시

        print("업데이트 이벤트 발생")


    # 컨트롤 개수 불러오는 기능
    def Control_Count(self):
        try:
            self.bcd_list = []
            self.temp_bcd_list = []
            Control_Count = 0
            temp = DB.Sel_Bcd()
            is_path = temp[0][0].rsplit('\\', 3)
            column = 0
            if is_path[1] == "PCR":
                column = 3
            file = open(temp[0][0], "r", encoding="utf8")
            # 현재 비교할 텍스트 파일
            lines = file.readlines()  # list 형태로 읽어옴
            lines.pop(0)
            cnt = 0

            for line in lines:
                if not line:
                    break

                temp3 = lines[cnt].split()

                Control_Check = temp3[column]
                if Control_Check[:1] == "R":
                    Control_Count += 1
                    continue
                cnt += 1

            file.close()
            return Control_Count
        except Exception as err:
            print(err)
            print("Control_Count 기능에러")


class Watcher(metaclass=Singleton):
    # 생성자
    temp = 0

    def __init__(self, path):
        self.event_handler = None  # Handler

        self.observer = Observer()  # Observer 객체 생성

        self.target_directory = path  # 감시대상 경로

        self.currentDirectorySetting()  # instance method 호출 func(1)

        # Ui_MainWindow.temp_src == "AA"

    # func (1) 현재 작업 디렉토리

    def currentDirectorySetting(self):
        print("현재 작업 디렉토리:  ", end=" ")
        # DB .Inst_bcd_path("")
        os.chdir(self.target_directory)

        print("{cwd}".format(cwd=os.getcwd()))

    # func (2)

    def run(self):

        self.event_handler = Handler()  # 이벤트 핸들러 객체 생성

        self.observer.schedule(
            self.event_handler,
            self.target_directory,
            recursive=True
        )
        self.observer.start()  # 감시 시작
        try:

            while True:  # 무한 루프
                time.sleep(1)  # 1초 마다 대상 디렉토리 감시
                # self.observer.stop()  # 감시 중단
                break

        except KeyboardInterrupt:  # 사용자에 의해 "ctrl + z" 발생시

            print("감시 중지...")
            self.observer.stop()  # 감시 중단
            print("Error")
            self.observer.join()

    # 화면 불러오는 기능
    def Main(self):
        dialog_main = MainUI.Ui_MainWindow()  # 배경화면 화면 객체생성
        dialog_sub = SubUI.Ui_MainWindow()  # 바코드 비교화면 객체생성
        dialog_main.showFullScreen()  # 배경화면은 전체화면으로 띄워줌
        dialog_sub.initUI()
        dialog_sub.exec()  # 바코드 비교화면 실행
        dialog_sub.setWindowFlags(QtCore.Qt.WindowType.WindowStaysOnTopHint) # 비교화면을 가장 최상단으로 만들어줌.
        Watcher.temp = 0  # 화면 띄워주는 시그널 0으로 만들어 안뜨도록함.




if __name__ == "__main__":
    DB_dlr = "C:\WorkList"
    TCW_dlr = "C:\TCW"
    WorkList_dlr = "C:\TCW\WorkList"
    Plrn_dlr = "C:\TCW\WorkList\Plrn"
    import shutil
    try:
        if not (os.path.isdir(DB_dlr)):
            os.makedirs(os.path.join(DB_dlr))
        if not (os.path.isdir(TCW_dlr)):
            os.makedirs(os.path.join(TCW_dlr))
        if not (os.path.isdir(WorkList_dlr)):
            os.makedirs(os.path.join(WorkList_dlr))
        if not (os.path.isdir(Plrn_dlr)):
            os.makedirs(os.path.join(Plrn_dlr))
        if not (os.path.isfile("C:\WorkList\\WorkList.db")): # 해당 경로에 DB파일 있는지 확인
            import win32api
            win32api.MoveFile("./WorkList.db", "C:/WorkList/WorkList.db") # 없으면 해당 경로로 DB파일 이동

    except OSError as e:
        print(e)
    DB = WorkList_db_class()
    temp = 0

    PE_path = DB.show_PE_path()
    PE_path = (PE_path[0][0])
    # DB_Info = DB.Show_Flag() #DB Flag 값 읽어옴 0 : 초기상태 Setting 1: Setting 된 상태
    #
    # DB_Dev = Dev_DataBase_class() # Dev에 대한 클래스 객체 생성
    # DB_Job = Job_DataBase_class() # Job에 대한 클래스 객체 생성
    # if DB_Info == 0:
    #     Dev_Calibration = DB_Dev.DbCalibration() #Dev - DbCalibration
    #     Dev_Calibration = DB_Dev.DbFreeDispenses() #Dev - DbFreeDispense
    #     Dev_LiquidContainer = DB_Dev.LiquidContainer() # Dev - LiquidContainer
    #     Dev_DbTipInfo = DB_Dev.DbTipInfo() # Dev - DbTipInfo
    #
    #     DB_Job.delete_protocol()
    #     DB_Job.make_protocol("Extraction_Seegene")
    #     DB_Job.make_protocol("OneStep_RV-EA")
    #     DB_Job.make_protocol("OneStep_SARS-CoV-2")
    #     DB_Job.make_protocol("OneStep_SC2FabR")
    #     DB_Job.make_protocol("PCRSetup_RV-EA")
    #     DB_Job.make_protocol("PCRSetup_SARS-CoV-2")
    #     DB_Job.make_protocol("PCRSetup_SC2FabR")
    #
    #     DB.Update_Flag()

    import win32api
    win32api.ShellExecute(0, "OPEN", PE_path, None, None, 1) # PreNATII.exe 실행
    import psutil  # 실행중인 프로세스 및 시스템 활용 라이브러리

    for proc in psutil.process_iter():
        try:
            # 프로세스 이름, PID값 가져오기
            processName = proc.name()
            processID = proc.pid
            temp = os.getpid()

            if processName == "WorkList.exe":
                parent_pid = processID  # PID
                parent = psutil.Process(parent_pid)  # PID 찾기
                if processID != temp:
                    for child in parent.children(recursive=True):  # 자식-부모 종료
                        child.kill()
                    parent.kill()

        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):  # 예외처리
            pass

    import sys
    import os

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    path1 = ""
    path1 = DB.show_path()
    path1 = path1[0][0]
    myWatcher = Watcher(path1)
    myWatcher.run()

    while True:  # 무한 루프를 통해 파일이 생성될때 화면 시그널이 1로 되며, 1이되면 화면을 띄워주는 함수로 간다.
        time.sleep(1)  # 1초 마다 대상 디렉토리 감시
        if myWatcher.temp == 1:
            myWatcher.Main()
        continue